<Book_C_Плус>
  <Указатели>Установка диапазонов с помощью &amp;&amp; Операция &amp;&amp; также позволяет установить последовательность операторов if else if else, где каждый выбор соответствует определенному диапазону значений. В  листинге 6.6 иллюстрируется такой подход. В нем также демонстрируется полезная  техника обработки серии сообщений. Точно так же, как переменная-указатель на char может идентифицировать целую строку, указывая на ее начало, массив указателей на char может идентифицировать серию строк. Вы просто присваиваете адрес каждой строки различным элементам массива. Код в листинге 6.6 использует массив </Указатели>
  <ООП>Еще один урок ООП: объекты, наследование и ссылки Классы ostream и of stream вскрывают интересное свойство ссылок. Как  упоминалось в главе 6, объекты типа of stream могут использовать методы ostream,  позволяя файловому вводу-выводу применять те же формы, что и консольный ввод-вывод. Средство языка, позволяющее передавать возможности из одного класса в другой,  называется наследованием. Оно подробно рассматривается в главе 13. Вкратце, ostream называется базовым классом (поскольку класс of stream основан на нем), a of stream — производным классом (т.к. он порожден от ostream). Производный класс наследует  методы базового класса. Это означает, что объект of stream может использовать функции</ООП>
  <Наследование>Часто для библиотек классов доступен исходный код, и каждый может  модифицировать их в соответствии со своими потребностями. Однако в C++ для расширения и изменения классов имеется более удобный метод, чем правка кода. Этот способ — наследование классов — позволяет порождать новые классы от старых, называемых  базовыми классами. Производный класс наследует все свойства, включая методы, старого класса. Унаследовать состояние обычно легче, чем построить его с нуля. Точно так же порождение класса с помощью наследования обычно проще разработки нового. Ниже перечислено, что позволяет делать наследование. • Добавлять новые возможности в существующий класс. Например, в  существующий базовый класс массива можно добавить арифметические операции. • Добавлять данные, которые представляет класс. Например, взяв за основу  базовый класс строки, можно породить класс, в котором добавлен член данных, представляющий цвет, и который будет использоваться при выводе строки на экран. • Изменять поведение методов класса. Например, от класса Passenger, который представляет услуги, предоставляемые пассажиру авиалинии, можно породить</Наследование>
  <Циклы> программам необходимы инструменты для  выполнения повторяющихся действий и принятия решений. Конечно, язык C++  предоставляет такие инструменты. На самом деле в нем используются те же циклы for, while, do while и операторы if, switch, которые есть в языке С, поэтому если вы знаете С, то можете быстро пробежаться по этой и следующей главе. (Но все-таки не  слишком спешите — вы же не хотите пропустить объяснение того, как объект сіп  обрабатывает символьный ввод.) Все эти разнообразные управляющие операторы часто</Циклы>
  <Классы> Классы C++ обеспечивают более высокий уровень повторного использования кода. Многие поставщики сейчас предлагают библиотеки, которые состоят из объявлений и реализаций классов. Поскольку класс объединяет представление данных с методами, образуется более интегрированный пакет, чем библиотека функций. К примеру,  единственный класс может предоставлять все средства для управления диалоговыми  окнами. Часто для библиотек классов доступен исходный код, и каждый может  модифицировать их в соответствии со своими потребностями. Однако в C++ для расширения</Классы>
</Book_C_Плус>